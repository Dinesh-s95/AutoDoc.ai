[
  {
    "className": "IdentityproviderApplication",
    "annotations": [
      "SpringBootApplication"
    ],
    "methods": [
      "public static void main(String[] args)"
    ],
    "endpoints": [],
    "fields": [],
    "isEntity": false,
    "isRestController": false
  },
  {
    "className": "JwtAuthFilter",
    "annotations": [
      "Autowired",
      "Component",
      "Override",
      "Slf4j"
    ],
    "methods": [
      "@Override protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException"
    ],
    "endpoints": [],
    "fields": [
      "userService : UserService"
    ],
    "isEntity": false,
    "isRestController": false
  },
  {
    "className": "SecurityConfig",
    "annotations": [
      "Autowired",
      "Bean",
      "Configuration",
      "EnableWebSecurity"
    ],
    "methods": [
      "@Bean public AuthenticationManager authenticationManager(final AuthenticationConfiguration authConfig) throws Exception",
      "@Bean public AuthenticationProvider authenticationProvider()",
      "@Bean public SecurityFilterChain securityFilterChain(final HttpSecurity http) throws Exception"
    ],
    "endpoints": [],
    "fields": [
      "jwtAuthFilter : JwtAuthFilter",
      "userDetailsService : UserDetailsService"
    ],
    "isEntity": false,
    "isRestController": false
  },
  {
    "className": "UserController",
    "annotations": [
      "Autowired",
      "PostMapping",
      "RequestBody",
      "RequestMapping",
      "RestController"
    ],
    "methods": [
      "@PostMapping(\"/login\") public ResponseEntity<Object> login(@RequestBody final Users user)",
      "@PostMapping(\"/refreshtoken\") public ResponseEntity<Object> refreshToken()",
      "@PostMapping(\"/register\") public Users registerUser(@RequestBody final Users user)"
    ],
    "endpoints": [
      {
        "annotation": "PostMapping",
        "method": "@PostMapping(\"/register\") public Users registerUser(@RequestBody final Users user)",
        "url": "/idp/users/register",
        "inputs": [
          {
            "annotation": "RequestBody",
            "type": "final",
            "name": "Users"
          }
        ],
        "output": "Users"
      },
      {
        "annotation": "PostMapping",
        "method": "@PostMapping(\"/login\") public ResponseEntity<Object> login(@RequestBody final Users user)",
        "url": "/idp/users/login",
        "inputs": [
          {
            "annotation": "RequestBody",
            "type": "final",
            "name": "Users"
          }
        ],
        "output": "ResponseEntity<Object>"
      },
      {
        "annotation": "PostMapping",
        "method": "@PostMapping(\"/refreshtoken\") public ResponseEntity<Object> refreshToken()",
        "url": "/idp/users/refreshtoken",
        "inputs": [],
        "output": "ResponseEntity<Object>"
      }
    ],
    "fields": [
      "authManager : AuthenticationManager",
      "jwtService : JWTService",
      "userService : UserService"
    ],
    "isEntity": false,
    "isRestController": true
  },
  {
    "className": "AuthRequest",
    "annotations": [
      "Data"
    ],
    "methods": [],
    "endpoints": [],
    "fields": [
      "password : String",
      "username : String"
    ],
    "isEntity": false,
    "isRestController": false
  },
  {
    "className": "AuthResponse",
    "annotations": [],
    "methods": [],
    "endpoints": [],
    "fields": [],
    "isEntity": false,
    "isRestController": false
  },
  {
    "className": "UserPrincipal",
    "annotations": [
      "Override"
    ],
    "methods": [
      "@Override public Collection<? extends GrantedAuthority> getAuthorities()",
      "@Override public String getPassword()",
      "@Override public String getUsername()",
      "@Override public boolean isAccountNonExpired()",
      "@Override public boolean isAccountNonLocked()",
      "@Override public boolean isCredentialsNonExpired()",
      "@Override public boolean isEnabled()"
    ],
    "endpoints": [],
    "fields": [
      "user : final Users"
    ],
    "isEntity": false,
    "isRestController": false
  },
  {
    "className": "Client",
    "annotations": [
      "Column",
      "Entity",
      "GeneratedValue",
      "Getter",
      "Id",
      "Setter",
      "Table"
    ],
    "methods": [],
    "endpoints": [],
    "fields": [
      "clientName : String",
      "clientSecret : String",
      "id : Long",
      "redirectUri : String"
    ],
    "isEntity": true,
    "isRestController": false
  },
  {
    "className": "Role",
    "annotations": [
      "Column",
      "Entity",
      "GeneratedValue",
      "Id",
      "ManyToMany",
      "Table"
    ],
    "methods": [
      "public Long getId()",
      "public Set<User> getUsers()",
      "public String getName()",
      "public void setId(Long id)",
      "public void setName(String name)",
      "public void setUsers(Set<User> users)"
    ],
    "endpoints": [],
    "fields": [
      "id : Long",
      "name : String",
      "users : Set<User>"
    ],
    "isEntity": true,
    "isRestController": false
  },
  {
    "className": "Token",
    "annotations": [
      "Column",
      "Entity",
      "GeneratedValue",
      "Getter",
      "Id",
      "JoinColumn",
      "ManyToOne",
      "Setter",
      "Table"
    ],
    "methods": [],
    "endpoints": [],
    "fields": [
      "accessToken : String",
      "client : Client",
      "id : Long",
      "refreshToken : String",
      "user : User"
    ],
    "isEntity": true,
    "isRestController": false
  },
  {
    "className": "User",
    "annotations": [
      "Column",
      "Data",
      "Entity",
      "GeneratedValue",
      "Getter",
      "Id",
      "JoinColumn",
      "JoinTable",
      "ManyToMany",
      "Setter",
      "Table"
    ],
    "methods": [],
    "endpoints": [],
    "fields": [
      "email : String",
      "id : Long",
      "passwordHash : String",
      "roles : Set<Role>",
      "username : String"
    ],
    "isEntity": true,
    "isRestController": false
  },
  {
    "className": "UserRepository",
    "annotations": [
      "Repository"
    ],
    "methods": [],
    "endpoints": [],
    "fields": [],
    "isEntity": false,
    "isRestController": false
  },
  {
    "className": "AuditService",
    "annotations": [
      "Service"
    ],
    "methods": [
      "public void logEvent(String event)"
    ],
    "endpoints": [],
    "fields": [],
    "isEntity": false,
    "isRestController": false
  },
  {
    "className": "EmailService",
    "annotations": [
      "Service"
    ],
    "methods": [
      "public void sendWelcomeEmail(String to)"
    ],
    "endpoints": [],
    "fields": [
      "notificationService : final NotificationService"
    ],
    "isEntity": false,
    "isRestController": false
  },
  {
    "className": "JWTService",
    "annotations": [
      "Service",
      "Slf4j"
    ],
    "methods": [
      "public String extractUsername(String token)",
      "public String generateToken(final String username)",
      "public boolean validateToken(String token)",
      "public void invalidateToken(String token)"
    ],
    "endpoints": [],
    "fields": [
      "auditService : final AuditService",
      "secretKey : final Key",
      "tokenBlacklistService : final TokenBlacklistService"
    ],
    "isEntity": false,
    "isRestController": false
  },
  {
    "className": "NotificationService",
    "annotations": [
      "Service"
    ],
    "methods": [
      "public void notifyUser(String user, String message)"
    ],
    "endpoints": [],
    "fields": [],
    "isEntity": false,
    "isRestController": false
  },
  {
    "className": "TokenBlacklistService",
    "annotations": [
      "Service"
    ],
    "methods": [
      "public void blacklistToken(String token)"
    ],
    "endpoints": [],
    "fields": [],
    "isEntity": false,
    "isRestController": false
  },
  {
    "className": "UserService",
    "annotations": [
      "Autowired",
      "Override",
      "Service"
    ],
    "methods": [
      "@Override public UserDetails loadUserByUsername(final String username) throws UsernameNotFoundException",
      "public Users register(final Users user)"
    ],
    "endpoints": [],
    "fields": [
      "auditService : AuditService",
      "emailService : EmailService",
      "encoder : BCryptPasswordEncoder",
      "userRepository : UserRepository"
    ],
    "isEntity": false,
    "isRestController": false
  },
  {
    "className": "IdentityproviderApplicationTests",
    "annotations": [
      "SpringBootTest",
      "Test"
    ],
    "methods": [],
    "endpoints": [],
    "fields": [],
    "isEntity": false,
    "isRestController": false
  }
]