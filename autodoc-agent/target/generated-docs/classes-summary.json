[
  {
    "className": "IdentityproviderApplication",
    "annotations": [
      "SpringBootApplication"
    ],
    "methods": [
      "public static void main(String[] args)"
    ],
    "endpoints": [],
    "fields": [],
    "isEntity": false,
    "isRestController": false
  },
  {
    "className": "AuthResponse",
    "annotations": [],
    "methods": [],
    "endpoints": [],
    "fields": [],
    "isEntity": false,
    "isRestController": false
  },
  {
    "className": "UserPrincipal",
    "annotations": [],
    "methods": [
      "public Collection\u003c? extends GrantedAuthority\u003e getAuthorities()",
      "public String getPassword()",
      "public String getUsername()",
      "public boolean isAccountNonExpired()",
      "public boolean isAccountNonLocked()",
      "public boolean isCredentialsNonExpired()",
      "public boolean isEnabled()"
    ],
    "endpoints": [],
    "fields": [
      "user : Users"
    ],
    "isEntity": false,
    "isRestController": false
  },
  {
    "className": "AuthRequest",
    "annotations": [
      "Data"
    ],
    "methods": [],
    "endpoints": [],
    "fields": [
      "username : String",
      "password : String"
    ],
    "isEntity": false,
    "isRestController": false
  },
  {
    "className": "UserRepository",
    "annotations": [
      "Repository"
    ],
    "methods": [
      " Users findByUsername(String username)"
    ],
    "endpoints": [],
    "fields": [],
    "isEntity": false,
    "isRestController": false
  },
  {
    "className": "SecurityConfig",
    "annotations": [
      "Configuration",
      "EnableWebSecurity"
    ],
    "methods": [
      "public SecurityFilterChain securityFilterChain(final HttpSecurity http) throws Exception",
      "public AuthenticationManager authenticationManager(final AuthenticationConfiguration authConfig) throws Exception",
      "public AuthenticationProvider authenticationProvider()"
    ],
    "endpoints": [],
    "fields": [
      "userDetailsService : UserDetailsService",
      "jwtAuthFilter : JwtAuthFilter"
    ],
    "isEntity": false,
    "isRestController": false
  },
  {
    "className": "JwtAuthFilter",
    "annotations": [
      "Slf4j",
      "Component"
    ],
    "methods": [
      "protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException"
    ],
    "endpoints": [],
    "fields": [
      "jwtService : JWTService",
      "userService : UserService"
    ],
    "isEntity": false,
    "isRestController": false
  },
  {
    "className": "Users",
    "annotations": [
      "Entity",
      "Data",
      "Getter",
      "Setter"
    ],
    "methods": [
      "public String getPassword()",
      "public String getUsername()"
    ],
    "endpoints": [],
    "fields": [
      "userId : Long",
      "username : String",
      "password : String"
    ],
    "isEntity": true,
    "isRestController": false
  },
  {
    "className": "UserController",
    "annotations": [
      "RestController",
      "RequestMapping"
    ],
    "methods": [
      "public String greet()",
      "public Users registerUser(@RequestBody final Users user)",
      "public ResponseEntity\u003cObject\u003e login(@RequestBody final Users user)"
    ],
    "endpoints": [
      "GetMapping -\u003e greet",
      "PostMapping -\u003e registerUser",
      "PostMapping -\u003e login"
    ],
    "fields": [
      "userService : UserService",
      "authManager : AuthenticationManager",
      "jwtService : JWTService"
    ],
    "isEntity": false,
    "isRestController": true
  },
  {
    "className": "JWTService",
    "annotations": [
      "Slf4j",
      "Service"
    ],
    "methods": [
      "public String generateToken(final String username)",
      "public boolean validateToken(String token)",
      "public String extractUsername(String token)"
    ],
    "endpoints": [],
    "fields": [
      "secretKey : Key"
    ],
    "isEntity": false,
    "isRestController": false
  },
  {
    "className": "UserService",
    "annotations": [
      "Service"
    ],
    "methods": [
      "public UserDetails loadUserByUsername(final String username) throws UsernameNotFoundException",
      "public Users register(final Users user)"
    ],
    "endpoints": [],
    "fields": [
      "userRepository : UserRepository",
      "encoder : BCryptPasswordEncoder"
    ],
    "isEntity": false,
    "isRestController": false
  }
]