name: Sync Documentation to Confluence

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  sync-to-confluence:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      pull-requests: write
      issues: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Check for documentation changes
        id: check-docs
        run: |
          # Check if documentation files were changed in this PR
          CHANGED_DOCS=$(git diff --name-only HEAD^ HEAD | grep -E '\.(md|adoc)$' | head -10 || true)
          DOC_FOLDERS="identityprovider/documentation"
          
          echo "Changed documentation files:"
          echo "$CHANGED_DOCS"
          
          # Check if any documentation folder exists
          HAS_DOCS=false
          for folder in $DOC_FOLDERS; do
            if [ -d "$folder" ]; then
              HAS_DOCS=true
              echo "Found documentation folder: $folder"
              break
            fi
          done
          
          echo "has_docs=$HAS_DOCS" >> $GITHUB_OUTPUT
          echo "changed_docs<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGED_DOCS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Upload documentation to Confluence
        if: steps.check-docs.outputs.has_docs == 'true'
        env:
          CONFLUENCE_URL: "https://sharan99r.atlassian.net"
          CONFLUENCE_USER: "sharan99r@gmail.com"
          CONFLUENCE_API_TOKEN: "ATATT3xFfGF0YEQDKHLV0oermB28ByBuIADqdGqjym2PvYoOQc3Xg_z0fwGiucI2El0RaQGFSFFxEpXgH1SqtyWyvOc7sqoOuPVxCe033l-1-c6_glF5CWf1M7qe5o7nFAbwK4Abwa-at7XCewkcAJbfn7jCu53CnQYbPNfzFPlrAK-LzqdJCt8=E58519F7"
          SPACE_KEY: "~712020a1106f7965b7429fa169a05d4788f4d5"
          DOCS_FOLDER: "./identityprovider/documentation"
        run: |
          echo "Running Confluence documentation uploader..."
          echo "PR: #${{ github.event.pull_request.number }} - ${{ github.event.pull_request.title }}"
          echo "Author: ${{ github.event.pull_request.user.login }}"
          echo "Merged at: $(date '+%B %d, %Y at %H:%M UTC')"
          echo ""
          
          # Run the hierarchical uploader
          python confluence_uploader_hierarchical.py
      - name: Post success comment
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: ${{ github.event.pull_request.number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '‚úÖ Documentation has been successfully updated in Confluence using hierarchical structure!\n\nüìö **Updated Documentation:**\n- Parent Page: Identity Provider Documentation\n- Child Pages: Architecture Design, Detailed Design, OpenAPI Specification\n\nüîó [View in Confluence](https://sharan99r.atlassian.net/wiki/spaces/~712020a1106f7965b7429fa169a05d4788f4d5)\n\n**PR Details:**\n- PR #${{ github.event.pull_request.number }}: ${{ github.event.pull_request.title }}\n- Author: ${{ github.event.pull_request.user.login }}\n- Merged: ' + new Date().toLocaleString()
            })

      - name: Post failure comment
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: ${{ github.event.pull_request.number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '‚ùå Failed to update documentation in Confluence.\n\n**Error Details:**\nThe hierarchical documentation uploader encountered an issue. Please check the [workflow logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.\n\n**Next Steps:**\n1. Check the workflow logs for specific error messages\n2. Verify Confluence API credentials and permissions\n3. Ensure documentation files are properly formatted\n4. Re-run the workflow if needed'
            })

      - name: Log workflow completion
        if: always()
        run: |
          echo "Confluence sync workflow completed"
          echo "Status: ${{ job.status }}"
          echo "PR: #${{ github.event.pull_request.number }}"
          echo "Time: $(date '+%Y-%m-%d %H:%M:%S UTC')"